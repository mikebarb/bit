c
q
c
display thisslot.id
c
slot_dom_id
n
c
thisslot
c
@slotsinfo.count
c
n
s
c
flagAllocateAddedToSlot
c
@sessallocate.count
@sessallocate
c
@students_stats
@student_stats
c
mike.count
mike
mike = Student.includes(:lessons, :roles).where(:lessons => {status: 'global'}, 'roles.student_id' => 'student.id')
mike.count
mike
mike = Student.includes(:lessons, :roles).where(:lessons => {status: 'global'}, 'role.student_id' => 'student.id')
mike[0].roles
mike[0].roles.status
mike[0].role.status
mike[0].pname
mike[0].roles
mike[0].slots
mike[0].lessons
mike[0]
mike[0].slots
mike[0].slot
mike
mike = Student.includes(:lessons, :roles).where(:lessons => {status: 'global'})
m = Student.includes(:lessons, :roles).where(:lessons => {status: 'global'})
Student.includes(:lessons, :roles).where(:lessons => {status: 'global'})
mike = Student.includes(:lessons, :Student.includes(:lessons, :roles).where(:lessons => {status: 'global'})role).where(:lessons => {status: 'global'})
mike.count
mike = Student.includes(:lessons, :role).where(:lessons => {status: 'global'})
@global_students.count
@global_students
@global_students = Student.includes(:lessons).where(:lessons => {status: 'global'})
c
@global_lessons_with_slots
c
mike[0].slot
mike = Lesson.where(id: @alllessons_ids ).includes(:slot)
mike[0].slot
mike.slot.location
mike.count
mike = Lesson.where(id: @alllessons_ids ).includes(:slots)
mike = Lesson.where(id: @alllessons_ids )
@alllessons_ids
@alllessons
mike.map { |o| o.id }
mike
mike.count
mike = Lesson.where('lesson.id' => @alllessons_ids )
@alllessons_ids = @alllessons.keys
mike.count
mike = Lesson.where('lesson.id' => @alllessons.keys )
mike.count
mike = Lesson.where(lesson: @alllessons.keys )
Lesson.where(lesson: @alllessons.keys )
Lesson.find(29193)
Lesson.find(29192)
@global_lessons_with_keys.count
@global_lessons_with_keys
@global_lessons_with_keys = Lesson.where('lesson.id' => @alllessons.keys)
@global_lessons_with_keys
@gloval_lessons_with_keys
 @global_lessons_with_slots = Lesson.where('lesson.id' => @alllessons.keys)
@global_lessons_with_slots = Lesson.where('lesson.id' => @alllessons.keys)
Lesson.where('lesson.id' => @alllessons.keys)
@alllessons.keys
@alllessons
c
student
n
c
v['student_object']
display v
dsp v
v
k
c
o.total
@students_stats
@student_stats
o[0]
o[2]
o[1]
o.length
o
c
@students_stats
c
n
c
@global_students.each {|o| print o.inspect + "\n"}
@global_students.each {|o| print o.inspect}
@global_students
n
c
n
c
@global_students
@gloval_students
n
@global_students
c
n
c
@global_students.map do |student| student.id end
@global_students
n
@students_stats
n
c
n
c
@global_students[1].lessons.map do |lesson| lesson.status end
@global_students[1].lessons.map do |lesson| lesson.id end
@global_students[0].pname
@global_students[0].lessons.map do |lesson| lesson.id end
@global_students[0].lessons.count
@global_students[0].lessons[1]
@global_students[0].lessons[0]
@global_students[0].lessons.count
@global_students[0].lessons
@global_students[0]
@global_students.count
@global_students
c
Global_students.count
Global_students = Student.includes(:lessons).where(:lessons => {status: 'global'})
Global_students.count
Global_students = Student.joins(:lessons).where(:lessons => {status: 'global'})
Global_students
Global_students = Student.joins(:lessons).where(:lessons => {status: 'gloval'})
Global_students[0].lessons[0]
Global_students[0].lessons.count
Global_students[0].lessons
Global_students[0]
Global_students.count
Global_students = Student.joins(:lessons)
Global_students.count
Global_students = Student.joins(:lessons).where("student.lesson.status=?", 'global')
Global_students.count
Global_students = Student.joins(:lessons).where("lesson.status=?", 'global')
Global_students.count
Global_students = Student.joins(:lessons)
Global_students.count
Global_students = Student.all
Global_lessons[0].students[0].pname
Global_lessons[0].students.count
Global_lessons[0].students
Global_lessons[0].student
Global_lessons[0]
Global_lessons = Lesson.where("status=?", 'global').includes(:students)
Global_lessons[0]
Global_lessons.count
Global_lessons = Lesson.where("status=?", 'global').include(:students)
Global_lessons.count
Global_lessons = Lesson.where("status=?", 'global')
Global_lessons.count
Global_lessons
Global_lessons = Lesson.where(status: 'global')
Lesson.where(status: 'global')
@global_students.count
@global_students = Student.includes(:lessons).where("lesson.status = ?", 'global')
@global_students.count
@global_students = Student.includes(:lessons)
@global_students.count
@global_students = Student.all
@global_students
q
celldatetime.strftime("%a")
celldatetime.strftime("%d%b")
celldatetime
celldatetimew
c
@students
@students.count
q
@global_lessons.count
@global_lessons = Role.where(status: 'global').includes(:students)
@global_lessons
Role.where(status: 'global').includes(:students)
Role.where(status: 'global')
q
c
celldow
n
celldatetime
n
cells
q
rowIndex
cellIndex
cells
c
q
mydatetime = DateTime.strptime(match[1], "%Y-%m-%d")
match[1]
match = value.match(/-(\d+-\d+-\d+)/)
value.match(/-(\d+-\d+-\d+)/)
value.match(/\w+-(\d+-\d+-\d+)/)
value.match(/\w+(\d+-\d+-\d+)/)
value
value.match(/\w+\d+-\d+-\d+/)
value
value = @colheaders[entry]
@colheaders[entry].match(/^\w{3}-(\d{10})/)
@colheaders[entry]
match
n
match
n
@colheaders[entry]
q
@locations
value
q
c
mydatetime.wday
mydatetime
q
c
mydatetime
n
match
c
match
c
n
 @global_lesson_domchange
n
 @global_lesson_domchange
n
global_lesson_dom_id
global_lesson_domchange
n
c
@global_lesson.id.to_s.rjust(@sf, "0")
global_lesson_dom_id
n
@global_lesson.id
slot_dom_id_base
