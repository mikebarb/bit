c
q
params['flagDbUpdateRun']
params.has_key?('flagDbUpdateRun')
params
Parameters
c
Role.find(17630)
Role.where(student_id: 1200).count
Role.where(student_id: 1200)
Roles.where(student_id: 1200)
Student.find(1200)
Student.find(1160)
c
n
@student_merge_into
@student_merge
@roles
b 1746
b 1745
c
q
temp = Student.find(3047)
temp = Student.find(3048)
c
q
Student.find(3048)
Student.find(3047)
c
Student.find(3048)
Student.find(3047)
c
Student.find(3048)
Student.find(3047)
c
@flagDbUpdateRun
n
@roles
@student_merge_into
@student_merge
q
Student.find(3047)
Student.find(3048)
c
n
c
@student
n
c
s['pname']
@student
n
@students[i]['message'].length
n
@student.pname
s['pname']
n
c
Student.where(pname: "c test")
c
n
@students[i]['message']
"ERROR - record already in the database - row #{(i+1).to_s}"
c
n
c
Student.where(pname: "b test")
Student.where(pname:" b test")
c
n
c
Student.where(pname: "a test")
c
n
c
n
q
n
@checkstudents
n
@students[i].has_key?('pname') 
q
c
@students
@students_raw
c
n
c
n
q
n
q
c
flagHeaderOK
n
q
flagHeaderOK
n
c
n
expectedheader
n
q
sheetheader
c
q
n
c
error
n
c
b 1700
b 1706
q
n
b 1705
b 1699
b 1609
c
n
c
q
@roles
c
@student_merge
c
q
@student_merge
c
q
@student_merge
n@student_merge
n
@roles
n
@roles
@roles.count
n
@students[i]['message']
n
@student_merge_into
n
merge_id
merge_into_id
student_merge_into
@student_merge_into
n
@student_merge
n
c
q
m[1]
m[2]
m[3]
m
n
c
s['merge'].match(/^Merge.+?(\d+)$/)
m = s['merge'].match(/^Merge.+?(\d+)$/)
c
b 1670
c
n
b 1664
info b 
c
n
c
n
q
info b
c
s
m = s['merge'].match(/^Merge.+(\d+)$/)
n
b 1666
c
n
s['id']
s
n
count_merges
n
display s
s
n
info b
c
n
b 1661
n
c
q
s['pname'] && @student.pname != s['pname']
s['pname']
@student
s['id']
s['is']
n
@students[0]
@students[1]
@students.count
c
q
s['id']
@student
@students[i]['pname']
@checkstudents
display s
s
@student
c
q
c
@students_raw[215][1]
@students_raw[215][0]
s[0]
s[1]
@students_raw[215][0]
@students_raw[215][1]
s[215]
s[0]
display s
s
q
@students
@students.count
s
@student.pname
@student
c
temp.map{|o| puts [o.pname, o.created_at].inspect}
temp.map(|o| puts [o.pname, o.created_at].inspect}
temp.count
temp = Student.all
temp = Student.where("created_at > ?", 2.days.ago)
temp.map(|o| puts [o.pname, o.created_at].inspect}
temp.map{|o| o.destroy}
temp.
temp.map(|o| puts [o.pname, o.created_at].inspect}
temp.each{|o| puts [o.pname, o.created_at].inspect}
temp.each(|o| puts [o.pname, o.created_at].inspect}
temp.map(|o| puts [o.pname, o.created_at.inspect]}
temp.count
temp = Student.where("created_at > ?", 2.days.ago)
temp = Student.where("created_at > ?", 2.hours.ago)
temp = Student.find(1753)
temp = Student.find(781)
temp = Student.find(9781)
temp = Student.find9781)
c
q
c
message
c
message
