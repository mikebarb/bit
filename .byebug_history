c
found_token = token_store.load(myid)
c
found_token = token_store.load(myid)
found_token = token_store1.load(myid)
q
n
s
n
s
q
tokenuser
n
id
s
c
tokenuser
n
tokenuser
return_value
s
tokenuser
s
tokenuser
n
id
s
c
q
tokenuser = Tokenuser.where(client_id: id).first
tokenuser
tokenuser.update(token_json: token)
token = "xxx"
tokenuser.update(token_json: token)
n
c
q
token_store1
n
s
tokenuser.token_json
n
s
n
s
tokenuser.update(token_json: token)
n
c
q
user.update(token_json: token)
s
token
tokenuser
n
s
c
q
s
tokenuser
s
n
s
c
q
tokenuser.token
tokenuser
n
tokenuser
n
s
tokenuser
n
s
token
id
s
n
s
tokenuser = Tokenuser.where(client_id: id).first
Tokenuser
s
id
s
token_store1
n
s
q
const_name
s
n
s
q
s
tokenuser
n
s
n
s
q
n
s
tokenuser = Tokenuser.where(client_id: id).first
s
n
s
n
s
q
tokenuser = Tokenuser.where(client_id: id)
s
id
s
token_store1
s
mytoken
myid
s
n
s
Google::Auth::Stores::FileTokenStore.class
DatabaseTokenStore.class
DatabaseTokenStore
s
DatabaseTokenStore.class
DatabaseTokenStore
Google::Auth::Stores::FileTokenStore.class
q
s
token_store1
n
s
token_store1.load('791702708242-fbkhr5oalbvj5kdops6c5k29t45onrl9.apps.googleusercontent.com')
          '791702708242-fbkhr5oalbvj5kdops6c5k29t45onrl9.apps.googleusercontent.com')
token_store1.load(
token_store1 = DatabaseTokenStore.new()
token_store1 = Google::Auth::Stores::DatabaseTokenStore.new()
token_store = Google::Auth::Stores::FileTokenStore.new(store_options)
store_options = {:file => './google_tokens'}
token_store = Google::Auth::Stores::FileTokenStore.new(store_options)
Module.nesting
Google::Auth::Stores::FileTokenStore.class
DatabaseTokenStore.class
s
Google::Auth::Stores::FileTokenStore.class
DatabaseTokenStore.class
q
Google::Auth::Stores::DatabaseTokenStore
token_store
DatabaseTokenStore.class
DatabaseTokenStore
Module.nesting
token_store = DatabaseTokenStore.new()
s
token_store = DatabaseTokenStore.new()
Module.nesting
Google::Auth::Stores::DatabaseTokenStore
DatabaseTokenStore.class
Module.nesting
q
Module.nesting
Google::Auth::Stores::DatabaseTokenStore.class
Google::Auth::Stores::FileTokenStore.class
q
Google::Auth::Stores::DatabaseTokenStore.class
Google::Auth::Stores::FileTokenStore.class
Google::Auth::Stores::DatabaseTokenStore.ancestors
Google::Auth::Stores::FileTokenStore.ancestors
q
Google::Auth::Stores::DatabaseTokenStore.ancestors
Google::Auth::Stores::FileTokenStore.ancestors
q
Google::Auth::Stores::DatabaseTokenStore.ancestors
Google::Auth::Stores::FileTokenStore.ancestors
q
Google::Auth::Stores::DatabaseTokenStore.ancestors
Google::Auth::Stores.ancestors
Google::Auth::Stores::FileTokenStore.ancestors
Google::Auth::Stores::FileTokenStore.nesting
s
q
s
Google::Auth::Stores::FileTokenStore.ancestors
::FileTokenStore.ancestors
FileTokenStore.ancestors
File_Token_Store.ancestors
Token_Store.ancestors
Token_store.ancestors
token_store.ancestor
token_store.ancestors
token_store.nesting
token_store.class
token_store
n
s
self.class
class
Module.nesting
s
Module.nesting
store_options
s
q
n
s
q
s
Module.nesting
s
Module.nesting
s
q
Module.nesting
token_store = Google::Auth::Stores::FileTokenStore.new(store_options)
store_options
store_options = {:file => './google_tokens'}
store_options
token_store = Google::Auth::Stores::FileTokenStore.new(store_options)
Module.nesting
q
const_name
s
q
token_store
token_store = Google::Auth::Stores::FileTokenStore.new(store_options)
store_options = {:file => './google_tokens'}
Google::Auth::Stores::FileTokenStore.new()
token_store1 = Google::Auth::Stores::DatabaseTokenStore.new()
q
const_name
s
q
s
q
s
q
s
q
n
q
n
s
secret
id
s
n
s
q
s
n
s
n
q
ENV['CLIENT_SECRET']
ENV['CLIENT_ID']
token_store
n
