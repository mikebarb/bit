q
c
s
thissession
n
s
n
c
q
n
q
n
allcommentonlysessions
n
                thissessions.joins(:tutors, :students).distinct
allcommentonlysessions = thissessions -
thissessions.joins(:tutors, :students).distinct
thissessions
q
temp1 = thissessions - temp
temp = thissessions.joins(:tutors, :students).distinct
temp = thissessions.joins(:tutors, :students)
temp = thissessions.joins(:tutors, :students).unique
thissessions
temp
temp2 = temp - temp1
temp
thissessions
temp = thissessions.joins(:tutors, :students)
temp = thissessions.joins(:tutors, :students).unique
temp1.count
temp1
temp1 = thissessions - temp
temp1 thissessions - temp
thissessions.count
temp.count
temp = thissessions.joins(:tutors, :students)
temp.inspect
temp
temp = thissessions.joins(:allroles, :alltutroles)
thissessions.joins(:allroles, :alltutroles)
thissessions
thissession
thissessions.where.(thissessions.students)
thissessions.where.not(thissessions.roles)
thissessions.where.not(thissessions.role)
thissessions.where.not(thissessions.roles)
thissessions
alltutroles.find_all_by_name(session_id)
alltutroles.id.all
alltutroles.ids
alltutroles.session_ids
alltutroles.session_id
alltutroles[0].session_id
alltutroles
                thissessions.where.not(session_id: alltutroles.session_ids)
allcommentonlysessions = 
thissession.ids
thissessions
allroles.session_ids
alltutroles.session_ids
allroles
alltutroles
q
c
n
thissession
n
mysessioncomment
s
mysessioncomment
mycomments
s
mysess["comment"]
q
c
requiredSlot["sessions"]
thisSession
s
thisSession["comment"]
s
c6
c1
q
c
entry.comments
cells
rows
slotid
entry.tutors
entry.students
entry.students[0].pname
entry.students.pname
entry.student.pname
entry.comments
entry
c
entry
q
c
entry.comments != nil && entry.comments != ""
c
entry.comments != nil && entry.comments != ""
c
entry.comments != nil && entry.comments != ""
c
entry.comments
c
q
n
s
q
colourToStatus(cf1)['colour'].downcase
colourToStatus(cf1)['colour'].to_lower
colourToStatus(cf1)['colour'] != 'white'
colourToStatus(cf1)['colour']
colourToStatus(cf1)
cf1
cf1 = getformat(r.values[1])
getformat(r.values[1])
r.values[1]
c0
q
responsedates.values[3][0]
responsedates.values[3]
ri
responsedates.values
responsedates
q
responsedates
q
responsedates
q
responsedates
c
range
n
sv
si
c
si
sv
range
n
c
range
n
c
range
n
sv
range
n
sv
si
c
sv
si
c
mystudent
thisstudent
c
n
thisroles.empty? 
thisroles
thisroles = allroles.where(student_id: thisstudent.id)
n
thisstudent
thisstudent = Student.where(pname: mystudentnamecontent[0]["name"]).first
n
mystudentnamecontent[0]['name'] == ""
mystudentnamecontent.empty?
mystudentnamecontent
n
mystudent
c
thisstudent
thisrole1
thissession
c
thisrole1
thissession
c
mystudentnamecontent[0]['name'] == ""
mystudentnamecontent.empty?
mystudentnamecontent
n
mystudent
q
mystudentnamecontent.empty?
n
mystudentnamecontent
n
mystudent
mystudent[0]
c
s
mystudent[0]
mystudent
mystudents
mystudent
mysessioncomment
thissession
c
alltutroles = Tutrole.where(session_id: thissessions.ids).where.not(status: ['onCall', 'onSetup'])
alltutroles = Tutrole.where(session_id: thissessions.ids).not(status: ['onCall', 'onSetup'])
alltutroles
alltutroles = Tutrole.where(session_id: thissessions.ids)
c
alltutroles
c
alltutroles
q
c
mystudentcomment
thisrole1.comment
thisrole1.comment == mystudentcomment
q
mystudentstatus
n
c
mystudentstatus
n
c
n
s
mystudent.comment
mystudentcomment
thisrole1.comment
n
thissession.id
thisrole1.session_id
s
thisrole1
s
thisroles.first
thisroles[0]
thisroles
n
thisroles
n
thisstudent
n
q
n
s
n
thisstudent
n
q
n
thisroles
n
thisroles
n
thisstudent
