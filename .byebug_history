q
c
result
n
status
n
s
q
entry
person
c
entry
tutor
q
c
tutor
l=
q
tutor
n
b
entry.tutors
n
entry
l=
q
enddate
startdate
c
b 26
b 24
c
b 24
q
enddate = Date.today + (Integer(current_user.history_forward) rescue 7)
enddate = Date.today + Integer(current_user.history_forward) rescue 7
Date.today
startdate
enddate
l=
enddate
n
startdate
n
q
hfd
hbf
n
hbd
n
q
current_user.history_forward
current_user.history_back
q
tutors.map { |obj| p obj.pname }
tutors.count
tutors
n
q
hbd =  Integer(history_back_days) rescue 100
history_back_days = nil
hbd =  Integer(history_back_days) rescue 100
history_back_days = ''
history_back_days
hbd =  Integer(history_back_days) rescue 100
hfd = Integer(history_forward_days) rescue 7
hbd =  Integer(history_back_days) rescue 100
history_forward_days = 30
history_back_days = 598
history_back_days
l=
answer
answer = Integer(a) rescue 10
Integer('') rescue 10
Integer(nil) rescue 10
Integer(a) rescue 10
Integer(0) rescue 10
Integer(1) rescue 10
integer(1) rescue 10
integer(0) rescue 10
lesson_ids = Tutrole.where (["tutor_id = ?", tutor_id]).map { |obj| obj.lesson_id }.uniq
n
q
lesson_objs.count
lesson_objs.map { |obj| p obj.slot.timeslot }
lesson_objs = Lesson.includes(:slot, :tutors, :students).where( id: lesson_ids, slots: { timeslot: startdate..enddate}).order('slots.timeslot')
lesson_objs = Lesson.includes(:slot).where( id: lesson_ids, slots: { timeslot: startdate..enddate}).order('slots.timeslot')
lesson_objs.map { |obj| p obj.slot.timeslot }
lesson_objs.count
lesson_objs = Lesson.joins(:slot).where( id: lesson_ids, slots: { timeslot: startdate..enddate}).order('slots.timeslot')
n
q
lesson_objs.map { |obj| p obj.slot.timeslot }
lesson_objs.sort! { |x,y| x.slot.timeslot <=> y.slot.timeslot }
lesson_objs.map { |obj| p obj.slot.timeslot }
lesson_objs.count
lesson_objs = Lesson.includes(:slot, :students, :tutors).find(lesson_ids)
lesson_ids.count
lesson_ids = lesson_objs.map { |obj| obj.id}.uniq
lesson_objs.count
lesson_objs = Lesson.joins(:slot).where( id: lesson_ids, slots: { timeslot: startdate..enddate})
lesson_objs.count
lesson_objs = Lesson.joins(:slot).where(id: lesson_ids, slots: { timeslot: startdate..enddate})
lesson_objs.count
lesson_objs = Lesson.joins(:slot).where( slots: {id: lesson_ids, timeslot: startdate..enddate})
lesson_objs.count
lesson_objs
lesson_objs = Lesson.joins(:slot).where( slots: {id: lesson_ids, timeslot: startdate..enddate}).order("slots.timeslot")
lesson_objs.map { |obj| p obj.slot.timeslot }
lesson_objs = Lesson.joins(:slot).where( slots: {id: lesson_ids, timeslot: startdate..enddate}).order("slot.timeslot")
lesson_objs.map { |obj| p obj.slot.timeslot }
lesson_objs = Lesson.joins(:slot).where( slots: {id: lesson_ids, timeslot: startdate..enddate})
l=
lesson_objs.map { |obj| p obj.slot.timeslot }
lesson_objs.count
lesson_objs = Lesson.joins(:slot).where( slots: {id: lesson_ids, timeslot: startdate..enddate})
lesson_objs.count
lesson_objs = Lesson.joins(:slot).where( id: lesson_ids, slots: {timeslot: startdate..enddate})
lesson_objs = Lesson.joins(:slot).where( slots: {timeslot: startdate..enddate}).find(lesson_ids)
lesson_objs = Lesson.joins(:slot).find(lesson_ids).where( slots: {timeslot: startdate..enddate})
lesson_objs = Lesson.joins(:slot).where( slots: {timeslot: startdate..enddate}).find(lesson_ids)
startdate = Date.today - 598
startdate = Date.today - 599
startdate = Date.today - 600
startdate = Date.today - 629
lesson_objs2.map { |obj| p obj.slot.timeslot }
startdate
lesson_objs.count
lesson_objs2.count
lesson_objs2 = lesson_objs.map { |obj| obj if obj.slot.timeslot > startdate }
lesson_objs.count
lesson_objs = Lesson.joins(:slot).find(lesson_ids)
lesson_ids
l=
lesson_objs = Lesson.includes(:slot).find(lesson_ids).where( slots: {timeslot: startdate..enddate})
lesson_objs = Lesson.joins(:slot).find(lesson_ids).where( slots: {timeslot: startdate..enddate})
lesson_objs = Lesson.joins(:slot).find(lesson_ids).count
lesson_objs = Lesson.joins(:slot).find(lesson_ids)
lesson_objs = Lesson.joins(:slot).where( slots: {timeslot: startdate..enddate}).count
lesson_objs = Lesson.joins(:slot).where( slots: {timeslot: startdate..enddate})
lesson_ids.count
n
lesson_ids.count
lesson_ids
n
enddate
startdate
n
c
n
startdate = Date.today - 629
startdate = Date.today - 628
startdate = Date.today - 630
startdate
n
c
n
q
lessons
n
l=
lesson_objs
n
l=
lesson_objs.count
lesson_objs
n
lesson_ids
n
q
l=
lessons_objs.count
lessons_objs = Lesson.joins(:slot).where( slots: {timeslot: startdate..enddate}).find(lesson_ids)
lessons_objs = Lesson.joins(:slot).find(lesson_ids).where( slots: {timeslot: startdate..enddate})
lessons_objs.count
lessons_objs = Lesson.includes(:slot).where( slots: {timeslot: startdate..enddate}).find(lesson_ids)
lessons_objs = Lesson.includes(:slot).where( slots: {timeslot: startdate..enddate})
lessons_objs = Lesson.includes(:slot).where( slots: {timeslot: startdate})
lessons_objs.count
lessons_objs = Lesson.joins(:slot).where( slots: {timeslot: startdate})
lessons_objs = Lesson.includes(:slot).where( slots: {timeslot: startdate})
lessons_objs = Lesson.includes(:slot).where( slot: {timeslot: startdate})
lessons_objs = Lesson.joins(:slot).where( slot: {timeslot: startdate})
lessons_objs.count
lessons_objs = Lesson.joins(:slot).where( slot: {timeslot: startdate..enddate})
lessons_objs = Lesson.joins(:slot).find(lesson_ids).where( slot: {timeslot: startdate..enddate})
lessons_objs.count
lesson_objs.count
lessons.objs.count
lessons_objs = Lesson.joins(:slot).find(lesson_ids).where( slot: {timeslot: startdate..enddate})
lesson_ids = tutrole_objs.map { |obj| obj.lesson_id }.uniq
tutrole_objs = Tutrole.where (["tutor_id = ?", tutor_id])
enddate
startdate.inspect
startdate
startdate = Date.today - 730
l=
tutrole_objs = Tutrole.includes(:lesson ).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.includes(:lesson{:tutors} ).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.includes(:lesson[:tutors] ).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.includes(:lesson, :tutor ).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.includes(:lesson :tutors ).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.includes(:lesson :tutor ).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.includes(:lesson {:slot} ).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.includes(:lesson :slot ).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.includes(:lesson, :slot ).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.includes(:lesson, :lesson.slots ).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.includes(:lesson, :lesson.slot ).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.includes(:lesson, :tutor).where ({tutor_id: tutor_id})
tutrole_objs.map {|obj| p obj.lesson.tutors.map {|t| t.pname}}
tutrole_objs.map {|obj| obj.lesson.tutors.first.pname}
tutrole_objs.map {|obj| obj.lesson.id}
tutrole_objs = Tutrole.includes(:lesson, :tutor).where ({tutor_id: tutor_id})
tutrole_objs.map {|obj| p obj.lesson.id}
tutrole_objs[0].lesson
tutrole_objs[0].lesson_id
tutrole_objs.lesson_id
tutrole_objs
tutrole_objs["lesson"]
tutrole_objs["lessons"]
tutrole_objs.lessons
tutrole_objs.lesson
tutrole_objs.count
tutrole_objs
tutrole_objs = Tutrole.includes(:lesson, :tutor).where ({tutor_id: tutor_id})
tutrole_objs
tutrole_objs.lessons.inspect
tutrole_objs.lesson.inspect
tutrole_objs.session.inspect
tutrole_objs.session
tutrole_objs.session.id
tutrole_objs = Tutrole.joins(:lesson, :tutor).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.joins(:lesson).where ({tutor_id: tutor_id})
tutrole_objs.inspect
tutrole_objs = Tutrole.joins(:lessons).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.where ({tutor_id: tutor_id})
tutrole_objs.inspect
tutrole_objs = Tutrole.joins(:sessions).where ({tutor_id: tutor_id})
tutrole_objs.inspect
tutrole_objs = Tutrole.joins(:session).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.joins(:sessions).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.joins(:session).where ({tutor_id: tutor_id})
tutrole_objs.inspect
tutrole_objs = Tutrole.joins(:slot).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.joins(:slots ).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.joins(slots: ).where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.where ({tutor_id: tutor_id})
tutrole_objs = Tutrole.where (tutor_id: tutor_id)
tutor_id
tutrole_objs = Tutrole.where (tutor_id: tutor_id)
tutrole_objs
n
q
lessons2.map { |obj| p obj.slot.timeslot }
lessons2.map { |obj| p obj.id }
lessons2
