q
mylist = cells["values"].sort_by {|obj| [obj.status, valueOrder(obj)] }
mylist
mylist = cells["values"].sort_by {|obj| [obj.status, valueOrder(obj)] }
q
mylist = cells["values"].sort_by {|obj| [obj.status, valueOrder(obj)] }
q
mylist = cells["values"].sort_by {|obj| [obj.status, valueOrder(obj)] }
q
c
mylist = cells["values"].sort_by {|obj| [obj.status, valueOrder(obj)] }
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutors.exists? ? o.tutors.first.pname : "_"}.sort
mylist = cells["values"].sort_by {|obj| [obj.status, obj.tutors.first.pname] }
mylist = cells["values"].sort_by {|obj| [obj.status, { obj.tutors.exists? ? obj.tutors.first.pname : "_" }] }
mylist = cells["values"].sort_by {|obj| [obj.status, { obj.tutors.exists? ? obj.tutors.first.pname : "_" }] }.map {|o| o.tutors.exists? ? o.tutors.first.pname : "_"}.sort
mylist = cells["values"].sort_by {|obj| [obj.status, {obj.tutors.exists? ? obj.tutors.first.pname : "_"}] }.map {|o| o.tutors.exists? ? o.tutors.first.pname : "_"}.sort
mylist = cells["values"].sort_by {|obj| [obj.status, {obj.tutors.exists? ? obj.tutors.first : "_"}] }.map {|o| o.tutors.exists? ? o.tutors.first.pname : "_"}.sort
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutors.exists? ? o.tutors.first.pname : "_"}.sort
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutors.exists? ? o.tutors.first.pname : "-"}.sort
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutors.exists? ? o.tutors.first.pname : "_"}.sort
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutors.exists? ? o.tutors.first.pname : nil}.sort
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutors.exists? ? o.tutors.first.pname : ""}.sort
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutors.exists? ? o.tutors.first.pname : ""}
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutors.exists? ? o.tutors.first.pname : "No Tutor"}
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutors.exist ? o.tutors.first.pname : "No Tutor"}
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutors ? o.tutors.first.pname : "No Tutor"}
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutors.first.pname}
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutors.first.panme}
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutor.panme}
mylist = cells["values"].sort_by {|obj| [obj.status] }.map {|o| o.tutor.panme
mylist = [#<Lesson id: 189, slot_id: 20, comments: "Milla must share a table with Axel today.", created_at: "2018-02-27 00:00:48", updated_at: "2018-02-27 01:47:50", status: "onSetup">, #<Lesson id: 190, slot_id: 20, comments: nil, created_at: "2018-02-27 00:00:48", updated_at: "2018-03-14 11:42:55", status: "on_BFL">, #<Lesson id: 191, slot_id: 20, comments: nil, created_at: "2018-02-27 00:00:48", updated_at: "2018-02-27 00:00:48", status: "standard">, #<Lesson id: 192, slot_id: 20, comments: "Martyna please share a table with Tania", created_at: "2018-02-27 00:00:48", updated_at: "2018-02-27 00:00:48", status: "standard">, #<Lesson id: 193, slot_id: 20, comments: "Milla must share a table with Axel today.", created_at: "2018-02-27 00:00:48", updated_at: "2018-02-27 00:00:48", status: "standard">, #<Lesson id: 194, slot_id: 20, comments: "Momina has a CU double in Week 3 (2 Aug) DXN-TUE-3...", created_at: "2018-02-27 00:00:48", updated_at: "2018-02-27 00:00:48", status: "standard">]
cells["values"].sort_by {|obj| [obj.status] }
cells["values"]
q
thistutrole1
thistutroles
n
mytutorkind
c
mytutorkind
n
mytutorkind
q
c
s
c
s
mytutorkind
q
cells["values"].sort_by {|obj| obj.status }
cells["values"]
cells["values"].sort_by{|obj| obj.status}
cells["values"].sort_by(status:)
cells["values"].sort_by(:status)
cells["values"].sort_by(status)
cells["values"]
q
@sessinfo
n
q
@sessinfo.inspect
@sessinfo
n
q
 @sessinfo      = Lesson.joins(:slot)
@sessinfo.inspect
@sessinfo
@sessioninfo
 @sessinfo      = Lesson.joins(:slots)
@sessinfo.inspect
@sessinfo
@sessioninfo
n
q
n
q
n
q
@sessinfo.inspect
@sessinfo
n
q
@datetimes
n
q
@locations
@locations1
n
q
@locations1
@locations
n
q
@locations
n
@slotsinfo
n
q
@slotsinfo
n
q
@slotsinfo
@slotsinfo = Slot.select('id, timeslot, location').where("timeslot >= mystartdate AND timeslot < myenddate")
myenddate
mystartdate
@slotsinfo.inspect
@slotsinfo
@slotsinfo = Slot.select('id, timeslot, location').where("timeslot >= mystartdate AND timeslot < myenddate")
@slotsinfo = Slot.select('id, timeslot, location')
myenddate = current_user.daystart + 5.days
mystartdate
mystartdate = current_user.daystart
current_user.daystart + 5.days
current_user.daystart
current_user.daystart + 5 d
current_user.daystart + 5d
current_user.daystart + 5days
current_user.daystart + 5
current_user.daystart
q
current_user
current_user.daystart
c
User.find 3
@users
n
c
@users
n
params
c
n
result
n
value
n
@user
@user.save
@user
format
respond_to
n
@user
n
@user
n
@user
n
c
@user
n
@user
n
c
n
@user.role != update_roles_params[:role]
n
@user
n
update_roles_params[:email]
n
update_roles_params[:email]
c
@user
@user = User.find params[:id]
c
params[:id]
params
c
params
c
n
c
home_url
tutors_url
c
n
c
n
@user.daydur
update_preferences_params[:daydur]
n
@user.daystart
update_preferences_params[:daystart]
flagupdate
@user
n
User.find_by email: current_user.email
user_signed_in? && current_user.email == update_preferences_params[:email]
user_signed_in?
current_user.email
update_preferences_params[:email]
q
update_preferences_params[:email]
myparameters[:email]
myparameters("email")
myparameters.email
myparameters
myparameters = update_preferences_params
update_preferences_params.email
update_preferences_params=>email
update_preferences_params("email")
update_preferences_params.email
update_preferences_params
params("user")
params(user)
params.user
params
c
n
c
q
n
@user
n
@user
n
c
@user
e
rescue
e
n
@user
c
n
c
@user
@user = User.find_by email: current_user.email
current_user.email
user_signed_in?
current_user
authenticate_user! 
q
authenticte_user! 
q
:q
authenticte_user!
c
params
c
s
key
s
value
s
self[key]
key
s
Parameters.new(request.parameters)
@_params
s
params
c
s
value
