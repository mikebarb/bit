c
display req
req
c
req
c
req.headers['Accept']
@default
req
c
@current_user
current_user.present?
@current_user
c
request.headers['Authorization']
s
q
request.headers
request.headers['authorization']
request.headers['Authorization']
s
c
request.headers.grep(/auth/)
request.headers['authorization'].grep(/auth/)
request.headers['authorization']
request.headers['Authorization']
request.headers
request
request.headers['Authorization']
@current_user
s
c
current_user
c
current_user
c
user1 = User.select(:id, :email, :auth_token).find(user.id)
user1 = User.select(:email, :auth_token).find(user.id)
user1 = User.select(:id, :email, :auth_token).find(user.id)
user1 = user.select(:id, :email, :auth_token).find(user.id)
user
c
response.headers['Authorization']
response.headers['Authorization'] = user.auth_token
response.headers['Authorization']
request.headers['Authorization']
request.headers['Authorization'] =  user.auth_token
request.headers['Authorization']
user.auth_token
c
n
user.generate_authentication_token!
c
user.generate_authentication_token!
c
user.class
user.methods.grep(/default/)
user.methods.grep(/set/)
user.methods.grep(/set_defaults/)
user.methods.grep(/generate/)
user.methods(false).grep(/generate/)
user.instance_methods(false).grep(/generate/)
user.instance_methods
user.instance_methods.grep(/generate/)
user.methods.grep(/generate/)
user.methods.grep(/raw/)
user.methods.grep('raw')
user.methods.grep('auth')
user.methods
user.generate_authentication_token!
user
c
n
user
n
User.find(1)
User.find_by(email: user_email)
user_email.present?
user_email
user_password
n
c
n
c
params[:session][:password]
params[:session][:email]
c
params[:session][:email]
params[:session]
params
c
params.map{|k,v| puts [k.inspect, "        ", v.inspect].inspect}
c
params.map{|k,v| puts [k.inspect, "        ", v.inspect].inspect}
c
params.map{|k,v| puts [k.inspect, "        ", v.inspect].inspect}
c
params[:session]
params[:action]
params.map{|k,v| puts [k.inspect, "        ", v.inspect].inspect}
c
params.map{|k,v| puts [k.inspect, "        ", v.inspect].inspect}
params
c
params
c
params.keys.each{|k, v| puts [k.inspect, '     ',v.inspect].inspect}
params['session']
params[:session]
params
c
params.keys.each{|k, v| puts [k.inspect, '     ',v.inspect].inspect}
params.keys.each{|k, v| puts [k.inspect, '\t',v.inspect].inspect}
params.keys.each{|k, v| puts [k.inspect, v.inspect].inspect}
params.keys.each{|k| puts k.inspect}
params['session']
params[:session]
c
params[:email]
session_params
protect_against_forgery?
protect_against_forgery
protect_from_forgery with: :null_session
protect_against_forgery?
protect_from_forgery?
protect_from_forgery
params.keys.each{|k| puts k.inspect}
params
c
params.keys.each{|k| puts k.inspect}
params.keys
params[:email]
params["\"email\""]
params[""email""]
params["email"]
params
c
params.email
params['email']
params[:email]
params
session_params[:password]
c
params['session']
params[:session]
params["session"]
params
params[:session]
params[:session][:password]
params
c
params
parms
c
n
self.class.exists?(auth_token: auth_token)
self
self.auth_token = Devise.friendly_token
self.class.exists?(auth_token: auth_token)
self.class
Devise.friendly_token
self
q
@roleinfo
@roleinfo[0].student
@roleinfo = Role.joins(:student, :lesson).where(lesson_id: 66795).includes(:student, :lesson).select('id', "students.pname")
@roleinfo[0].student
@roleinfo = Role.joins(:student, :lesson).where(lesson_id: 66795).includes(:student, :lesson).select('id', "student.pname")
@roleinfo = Role.joins(:student, :lesson).where(lesson_id: 66795).includes(:student, :lesson).select('id', "student"."pname")
@roleinfo = Role.joins(:student, :lesson).where(lesson_id: 66795).includes(:student, :lesson).select('id', 'student'.'pname')
@roleinfo[0].student
@roleinfo = Role.joins(:student, :lesson).where(lesson_id: 66795).includes(:student, :lesson).select('id', 'student.pname')
@roleinfo[0].student
@roleinfo = Role.joins(:student, :lesson).where(lesson_id: 66795).includes(:student, :lesson).select(:id, 'student.pname')
@roleinfo[0].student
@roleinfo.student
@roleinfo.student.pname
@roleinfo.students[0].pname
@roleinfo.count
@roleinfo = Role.joins(:student, :lesson).where(lesson_id: 66795).includes(:student, :lesson)
@roleinfo.count
@roleinfo
c
n
result
n
new_slot_id
old_slot_id
n
old_slot_id
n
result
n
q
@domchange['object_id']
old_slot_id
new_slot_id
old_slot_id
c
q
new_slot_id
old_slot_id
c
dis b 2
dis b 1
info b
c
n
@domchangerun
n
b 1131
n
b 1108
n
@block_roles[i].tutroles
@block_roles[i].roles
@block_roles[i]
n
b 1094
n
@block_roles.map{|o| puts ["lesson", o.id, o.next, o.first].inspect}
@block_roles
n
s
n
q
@domchange['action']
n
c
n
postfragmentids
@post_block_role
n
@pre_block_role
n
c
b 179
@block_roles.map{|o| puts ["role", o.id,o.next,o.first,o.block,"lesson",o.lesson_id].inspect}
n
@block_roles.map{|o| puts ["role", o.id,o.next,o.first,o.block,"lesson",o.lesson_id].inspect}
postfragmentids
postfragmentsids
postfragments
n
@role_chain.map{|o| puts ["role", o.id,o.next,o.first,o.block,"lesson",o.lesson_id].inspect}
@block_roles.map{|o| puts ["role", o.id,o.next,o.first,o.block,"lesson",o.lesson_id].inspect}
post_block_role_first_old_value
n
b 154
n
chainindexstartpostfragment
n
@role_chain_index
n
@block_lessons[i].id
@block_roles[i]
