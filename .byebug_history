q
c
q
c
display s
q
mike = cells["value"].sub('-', "-#{celltermweek}-")
mike = cells["value"].sub('-', '-#{celltermweek}-')
mike = cells["value"].sub('-', "-#{celltermweek}-")
mike = cells["value"].sub('-', "-#{celltermweek)-")
mike = cells["value"].sub('-', '-#{celltermweek)-')
mike = cells["value"].sub('-', '-x-')
mike = cells["value"].sub('-', 'x')
mike = cells["value"].gsub(/(-)/, 'x')
mike = cells["value"].gsub(/\w+(-)/, 'x')
mike = cells["value"].gsub(/\w+(-).*/, 'x')
mike
mike = cells["value"].gsub(/^\w+(-).*/, 'x')
cells["value"].gsub(/^\w+(-).*/, 'x')
cells["value"].gsub(/^\w+(-)/, 'x')
cells["value"]
cells["value"].class
cells["value"]
q
termweek = ((celldatetime - current_user.termstart.to_datetime).to_i)/7
diff
7 * 61
diff.to_i%7
diff.to_i/7
diff = DateTime.new(2020,4,24) -day1
diff.to_i/7
diff.to_i/1.week
diff.to_i
diff
diff/1.day
diff/1.week
diff/1.day
diff.to_s
diff.weeks
diff.days
diff.class
diff
diff = DateTime.new(2020,4,28) -day1
DateTime.new(2020,4,28) -day1
DateTime.new(2019,4,28) -day1
DateTime.new(2019,3,28) -day1
DateTime.new(2019,2,28) -day1
DateTime.new(2019,2,27) -day1
DateTime.new(2019,2,26) -day1
DateTime.new(2019,2,25) -day1
DateTime.new(2019,2,24) - day1
DateTime.new(2019,2,23) - day1
DateTime.new(2019,2,22) - day1
day2 - day1
day2.class
day2 = DateTime.new(2019,2,21)
day1 = DateTime.new(2019,2,20)
mike.class
mike.to_d
mike.to_days
mike
mike = celldatetime - current_user.termstart.to_datetime
celldatetime - current_user.termstart.to_datetime
(celldatetime - current_user.termstart.to_datetime)/1.week
termweek = ((celldatetime - current_user.termstart.to_datetime)/1.week).round
c
termweek = ((celldatetime - current_user.termstart.to_datetime)/1.week).round
termweek = ((celldatetime - current_user.termstart.to_datetime)/1.week)
c
display celldatetime
display location
diswplay location
q
location
q
termweek >= 0
termweek > 0
termweek
q
((celldatetime - termstart)/1.week).round
celldatetime - termstart
celldatetime.class
celldatetime
termstart.class
termstart
timestart
n
q
termstart.to_datetime.class
termstart.to_datetime
termstart.class
celldatetime.class
celldatetime.type
termstart
celldatetime
celldatetime - termstart
termstart - celldatetime
(termstart - celldatetime)
(celldatetime - termstart)
(termstart - celldatetime)
(termstart)
(celldatetime - termstart)
celldatetime - termstart
celldatetime.inspect
celldatetime
termend
termstart
n
c
q
n
q
termweek
n
c
q
c
celldatetime
mikestart
((celldatetime - mikestart)/1.week).round
((celldatetime = mikestart)/1.week).round
celldatetime
((mikestart-mikeend)/1.week).round
((mikeend-mikestart)/1.week).round
(mikeend-mikestart)/1.week
(mikeend-mikestart)
(mikeend-mikestart).weeks
mikeend-mikestart.weeks_ago
mikeend-mikestart.weeks+ags
mikeend-mikestart.weeks
mikeend-mikestart
current_user.termweeks
mikeend = mikestart + current_user.termweeks.weeks
mikeend = current_user.termweeks
mikestart
mikestart = current_user.termstart
mikestart = current_user.termstatt
current_user.termstart
current_user.startweek
current_user
@user
user
user.termstart
c
mike.to_i
mike.to_int
mike = params[:student_id]
params
c
n
c
@options[:startdate] + current_user.termweeks.weeks
@options[:startdate] + ( 1).weeks
@options[:startdate] + (1  + 1).weeks
@options[:startdate]
@options[:startdate] + (1 + current_user.termweeks).weeks
n
current_user.termstart.beginning_of_week
current_user.termstart
n
c
params
params['student_calendar']
params['student_calendar'] == true
params.has_key?('student_calendar')
n
cn
c
params[:student_calendar] 
params[:student_calendar] = 0
params[:student_calendar]
params.has_key?('student_calendar')
params
c
passedParams
params
c
params
c
lesson
n
a
n
studentlessons
student
q
studentlessons
a
c
n
studentlessons
c
studentlessons.sort{|x,y| x[1] <=> y[1]}.reverse
studentlessons.sort{|x,y| x[1] <=> y[1]}
studentlessons.sort({|x,y| x[1] <=> y[1]})
studentlessons.sort {|x,y| x[1] <=> y[1]}
studentlessons
c
studentlesson.inspect
studentlessn.inspect
studentlesson
c
studentlesson
c
lesson.slot.timeslot
c
student.lessons[0].slot.timeslot
student.lessons[0].slot
student.lessons.slot
student.lessons
lesson
student
lesson.slot.timeslot
student.lessons
student.lessons.order(:slot_id)
student.lessons
student.lessons.inspect
student.inspect
c
student.lessons
n
student.lessons
n
student.lessons
n
student.lessons
n
student.lessons
n
student.lessons
n
student.lessons
n
student.lessons
n
student.lessons
n
student.lessons
n
student.lessons
n
student.lessons
n
student.lessons
n
student.lessons.count
student.lessons
display student.lessons.count
n
student.lessons.sort(:slot_id)
student.lessons.sort
student.lessons
student
c
global_students.map{|o| puts    [o.id, o.pname].inspect}
global_students = Student.includes(:roles, lessons: :slot).where(:lessons => {status: 'global'}).order(:pname)
