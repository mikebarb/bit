c
location
c
location
q
n
mysheetproperties = googleAddSheet.call(location, mysheetproperties)
mysheetproperties
location
n
locationindex
c
n
mysheetproperties[locationindex]['sheet_id']
mysheetproperties[locationindex]['title']
locationindex
mysheetproperties
n
location
n
mysheetproperties
q
mysheet
mysheetproperties
n
q
n
result = service.batch_update_spreadsheet(spreadsheet_id, request_body, {})
request_body
n
request_body
n
s
n
q
n
q
n
request_body.requests
c
request_body.requests
n
request_body.requests
n
request_body.requests
n
s
q
n
request_body.requests
n
{"delete_sheet": {"sheet_id": o['sheet_id']}}
request_body.requests == nil
n
s
sheetproperties
c
n
display i
request_body.requests
n
request_body.requests
display i
dsp i
i
o
s
sheetproperties
q
sheetproperties
n
q
n
q
result.replies[0].add_sheet.properties.title
result.replies[0].add_sheet.properties.sheet_id
result.replies[0].add_sheet.properties.index
result.replies[0].add_sheet.properties
result.replies[0].add_sheet
result.replies[0]
result.replies
result
result.add_sheet
result.replies.add_sheet
result.replies.sheet_id
result.replies.add_sheet
result.replies
result
n
q
sheetproperties
q
sheetproperties
q
mysheets.map{ |o| o.properties.title}
mysheets.map{ |o| o.properties.sheet_id}
mysheets.map{ |o| o.properties.id}
mysheets[0].properties.sheet_id
mysheets[0].properties.id
mysheets[0].properties
mysheets[0]
mysheets[0][@index]
mysheets[0].@index
mysheets[0].index
mysheets.count
mysheets = result.sheets
mysheets = result["sheets"]
result.sheets[2]
result.sheets[1]
result.sheets[0]
result.sheets
result["sheets"]
result
q
n
q
n
request_body
n
request_body
q
request_body.methods
y
q
request_body.methods
request_body.class
request_body.requests
myusp
n
request_body
n
q
n
myusp
n
request_body
n
q
c
q
c
n
borderRowStart..borderRowStart+borderRows
borderRowStart+borderRows
borderRowStart
c
q
n
c
q
c
mydata
c
n
mydata
timeData
c
timeData
c
timeData
c
timeData
c
timeData
c
timeData
c
timeData
c
timeData
q
currentCol
cells["value"]
currentCol == 1 && cells["value"] != nil
c
currentCol == 1 && cells["value"] != nil
cells["value"]
currentCol
q
currentCol
currCol
cells["value"]
currentRow
baseSiteRow
c
q
c
q
c
q
mydata
n
currentRow
n
baseSlotRowInSite
maxPersonRowInAnySlot
c
baseSlotRowInSite
n
maxPersonRowInAnySlot
baseLessonRowInSlot
maxPersonRowInAnySlot
baseSlotRowInSite
c
q
n
c
q
c
q
n
c
n
c
b 2451
b 2457
n
maxPersonRowInLesson
baseLessonRowInSlot
c
b 2443
q
c
baseLessonRowInSlot
q
currentStudentInLesson
baseLessonRowInSlot
maxPersonRowInAnySlot
currentStudentRowInLesson
currentTutorRowInLesson
q
maxPersonRowInAnySlot
q
currentStudentInLesson
currentStudentInLesson % 2
c
currentStudentRowInLesson
(currentStudentInLesson % 2) == 1
currentStudentInLesson % 2
currentStudentInLesson
c
currentStudentInLesson % 2
currentStudentInLesson
q
mycolour
n
mycolour
n
q
mycolour
n
mycolour
mykind
n
mykind
n
